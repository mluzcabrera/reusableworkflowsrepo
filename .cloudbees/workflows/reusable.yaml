apiVersion: automation.cloudbees.io/v1alpha1
kind: workflow
name: reusable
on:
  workflow_call:
    inputs:
      targetenv:
        type: string
        
    # secrets:
    #   testsec2:
    #     required: false

jobs:
  testinheritance_noenv:
    steps:
      - name: Print testvar in component (inherited)
        uses: docker://golang:1.20.3-alpine3.17
        shell: sh
        run: |
          echo "testvar: ${{ vars.testvar }}"
      - name: Print testsec in component (inherited)
        uses: docker://golang:1.20.3-alpine3.17
        shell: sh
        run: |
          echo "testsec: ${{ secrets.testsec }}"

  testinheritance_env_hardcoded:
    environment: environment_mlcb_test_param
    steps:
      - name: Print testvar in environment (inherited)
        uses: docker://golang:1.20.3-alpine3.17
        shell: sh
        run: |
          echo "testvar: ${{ vars.testvar }}"
      - name: Print testsec in environment (inherited)
        uses: docker://golang:1.20.3-alpine3.17
        shell: sh
        run: |
          echo "testsec: ${{ secrets.testsec }}"

  # This should fail as the environment does not exist
  # testinheritance_env_hardcoded_wrong:
  #   environment: environment_mlcb_test_WRONG
  #   steps:
  #     - name: Print testvar in environment (inherited)
  #       uses: docker://golang:1.20.3-alpine3.17
  #       shell: sh
  #       run: |
  #         echo "testvar: ${{ vars.testvar }}"
  #     - name: Print testsec in environment (inherited)
  #       uses: docker://golang:1.20.3-alpine3.17
  #       shell: sh
  #       run: |
  #         echo "testsec: ${{ secrets.testsec }}"

  # This should fail if the environment passed as param does not exist, but work if environment is environment_mlcb_test_param
  testinheritance_env_param:
    environment: ${{ inputs.targetenv }}
    steps:
      - name: Print testvar in environment (inherited)
        uses: docker://golang:1.20.3-alpine3.17
        shell: sh
        run: |
          echo "testvar: ${{ vars.testvar }}"
      - name: Print testsec in environment (inherited)
        uses: docker://golang:1.20.3-alpine3.17
        shell: sh
        run: |
          echo "testsec: ${{ secrets.testsec }}"

  # This fails (orange banner) as the environment is null, but the problem is that the orange banner is cleared if another wf runs successfully
  # testinheritance_env_null:
  #   environment: null
  #   steps:
  #     - name: Print testvar in environment (inherited)
  #       uses: docker://golang:1.20.3-alpine3.17
  #       shell: sh
  #       run: |
  #         echo "testvar: ${{ vars.testvar }}"
  #     - name: Print testsec in environment (inherited)
  #       uses: docker://golang:1.20.3-alpine3.17
  #       shell: sh
  #       run: |
  #         echo "testsec: ${{ secrets.testsec }}"
    

  # testhardcoded1:
  #   environment: environment_mlcb_test_param
  #   steps:
  #     - name: Print testvar
  #       uses: docker://golang:1.20.3-alpine3.17
  #       shell: sh
  #       run: |
  #         echo " do I get the approval ?"

  # testparamenv1:
  #   environment: ${{ inputs.targetenv }}
  #   steps:
  #     - name: Print testvar
  #       uses: docker://golang:1.20.3-alpine3.17
  #       shell: sh
  #       run: |
  #         echo " do I get the approval ?"

  
  # testhardcoded:
  #   environment: ${{ 'environment_mlcb_test_param' }}
  #   steps:
  #     - name: Print testvar
  #       uses: docker://golang:1.20.3-alpine3.17
  #       shell: sh
  #       run: |
  #         echo "testvar: ${{ vars.testvar }}"
  #     - name: Print testsec
  #       uses: docker://golang:1.20.3-alpine3.17
  #       shell: sh
  #       run: |
  #         echo "testvar: ${{ secrets.testsec }}"

  # testparamenv:
  #   environment: ${{ inputs.targetenv }}
  #   steps:
  #     - name: Print env
  #       uses: docker://golang:1.20.3-alpine3.17
  #       shell: sh
  #       run: |
  #         echo "environment: ${{ inputs.targetenv }}"
  #     - name: Print testvar
  #       uses: docker://golang:1.20.3-alpine3.17
  #       shell: sh
  #       run: |
  #         echo "testvar: ${{ vars.testvar }}"
  #     - name: Print testsec2
  #       uses: docker://golang:1.20.3-alpine3.17
  #       shell: sh
  #       run: |
  #         echo "testsec: ${{ secrets.testsec }} and hardcode ????"
  #     - name: Print testsec2
  #       uses: docker://golang:1.20.3-alpine3.17
  #       shell: sh
  #       run: |
  #         echo "testsec2: ${{ secrets.testsec2 }} and hardcode ????"


    
